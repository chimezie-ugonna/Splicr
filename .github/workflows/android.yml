name: Android CI/CD

on:
  pull_request:
    types: [ closed ]
    branches:
      - staging
      - main

jobs:
  build:
    if: github.event.pull_request.merged == true  # Only run if the PR is merged
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'

      # Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Decode and write the keystore file from the base64 secret
      - name: Decode and write the keystore file
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > ${{ github.workspace }}/splicr-keystore.jks

      # Determine the build variant based on the branch and set debug symbols path
      - name: Set build variant and debug symbols
        id: variant
        run: |
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "VARIANT=staging" >> $GITHUB_ENV
            if [ -d app/build/outputs/native-symbols/staging/ ]; then
              echo "DEBUG_SYMBOLS=app/build/outputs/native-symbols/staging/" >> $GITHUB_ENV
            else
              echo "DEBUG_SYMBOLS=" >> $GITHUB_ENV
            fi
          else
            echo "VARIANT=release" >> $GITHUB_ENV
            if [ -d app/build/outputs/native-symbols/release/ ]; then
              echo "DEBUG_SYMBOLS=app/build/outputs/native-symbols/release/" >> $GITHUB_ENV
            else
              echo "DEBUG_SYMBOLS=" >> $GITHUB_ENV
            fi
          fi

      # Build the project with Gradle
      - name: Build with Gradle
        run: ./gradlew clean bundle${{ env.VARIANT }} -PversionCode=$VERSION_CODE -PversionName=$VERSION_NAME
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEYSTORE_PATH: ${{ github.workspace }}/splicr-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # Sign the AAB with jarsigner
      - name: Sign the AAB with jarsigner
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore ${{ github.workspace }}/splicr-keystore.jks \
            -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            app/build/outputs/bundle/${{ env.VARIANT }}/app-${{ env.VARIANT }}.aab \
            ${{ secrets.KEY_ALIAS }}

      # Generate release notes from the merge description
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Generating release notes from the merge description"
          echo "${{ github.event.pull_request.body }}" > release_notes.txt

      # Save release notes to a directory for use in deployment
      - name: Save Release Notes
        run: |
          mkdir -p release-notes
          mv release_notes.txt release-notes/whatsnew-en  # 'en' is for English, adjust if needed

      # Upload ProGuard/R8 mapping file
      - name: Upload ProGuard Mapping File
        run: |
          if [ -f app/build/outputs/mapping/${{ env.VARIANT }}/mapping.txt ]; then
            echo "Uploading ProGuard mapping file"
            # Logic to upload the mapping file
          else
            echo "No ProGuard mapping file found for variant: ${{ env.VARIANT }}. Skipping upload."
          fi

      # Deploy to Google Play (Beta Testing for Staging)
      - name: Deploy to Google Play (Staging)
        if: github.ref == 'refs/heads/staging'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_API_KEY }}
          packageName: ${{ secrets.PACKAGE_NAME_INTERNAL }}
          releaseFiles: app/build/outputs/bundle/staging/app-staging.aab
          whatsNewDirectory: release-notes
          mappingFile: app/build/outputs/mapping/staging/mapping.txt
          track: alpha
          # Conditionally include debugSymbols if the path exists
          debugSymbols: ${{ env.DEBUG_SYMBOLS != '' && env.DEBUG_SYMBOLS || '' }}
          changesNotSentForReview: true

      # Deploy to Google Play (Production for Release)
      - name: Deploy to Google Play (Production)
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_API_KEY }}
          packageName: ${{ secrets.PACKAGE_NAME_PRODUCTION }}
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          whatsNewDirectory: release-notes
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          track: production
          inAppUpdatePriority: 5
          # Conditionally include debugSymbols if the path exists
          debugSymbols: ${{ env.DEBUG_SYMBOLS != '' && env.DEBUG_SYMBOLS || '' }}
          changesNotSentForReview: true