name: Android CI/CD

on:
  push:
    branches:
      - staging
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'

      # Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Decode and write the keystore file from the base64 secret
      - name: Decode and write the keystore file
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > ${{ github.workspace }}/splicr-keystore.jks

      # Determine the build variant based on the branch
      - name: Set build variant
        id: variant
        run: |
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "VARIANT=staging" >> $GITHUB_ENV
          else
            echo "VARIANT=release" >> $GITHUB_ENV
          fi

      # Build the project
      - name: Build with Gradle
        run: ./gradlew clean bundle${{ env.VARIANT }} -PversionCode=$VERSION_CODE -PversionName=$VERSION_NAME
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEYSTORE_PATH: ${{ github.workspace }}/splicr-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # Sign the AAB with jarsigner
      - name: Sign the AAB with jarsigner
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore ${{ github.workspace }}/splicr-keystore.jks \
            -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            app/build/outputs/bundle/${{ env.VARIANT }}/app-${{ env.VARIANT }}.aab \
            ${{ secrets.KEY_ALIAS }}

      # Generate release notes
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Generating release notes from the merge description or commit message"
          if [ -n "${{ github.event.head_commit.message }}" ]; then
            echo "${{ github.event.head_commit.message }}" > release_notes.txt
          elif [ -n "${{ github.event.pull_request.body }}" ]; then
            echo "${{ github.event.pull_request.body }}" > release_notes.txt
          else
            echo "No release notes found" > release_notes.txt
          fi

      # Save release notes to a directory for use in deployment
      - name: Save Release Notes
        run: |
          mkdir -p release-notes
          mv release_notes.txt release-notes/${{ env.VARIANT }}-whatsnew.txt

      # Deploy to Google Play
      - name: Deploy to Google Play (Internal Testing)
        if: github.ref == 'refs/heads/staging'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_API_KEY }}
          packageName: ${{ secrets.PACKAGE_NAME_INTERNAL }}
          releaseFiles: app/build/outputs/bundle/staging/app-staging.aab
          whatsNewDirectory: release-notes
          track: internal
          status: draft

      - name: Deploy to Google Play (Production)
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_API_KEY }}
          packageName: ${{ secrets.PACKAGE_NAME_PRODUCTION }}
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          whatsNewDirectory: release-notes
          inAppUpdatePriority: 5